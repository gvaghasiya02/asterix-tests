set `compiler.optimize.groupby` 'false';use wisconopen2gb; select ten, count(ten) as count from wiscondefopen2gb group by wiscondefopen2gb.ten;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select ten, count(ten) as count from wiscondefopen2gb group by wiscondefopen2gb.ten;
use wisconopen2gb; select ten, count(ten) as count from wiscondefopen2gb /*+ hash */ group by wiscondefopen2gb.ten;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen2gb group by wiscondefopen2gb.tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen2gb group by wiscondefopen2gb.tenkgroups;
use wisconopen2gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen2gb /*+ hash */ group by wiscondefopen2gb.tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select milliongroups, count(milliongroups) as count from wiscondefopen2gb group by wiscondefopen2gb.milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select milliongroups, count(milliongroups) as count from wiscondefopen2gb group by wiscondefopen2gb.milliongroups;
use wisconopen2gb; select milliongroups, count(milliongroups) as count from wiscondefopen2gb /*+ hash */ group by wiscondefopen2gb.milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select similarstring, count(similarstring) as count from wiscondefopen2gb group by wiscondefopen2gb.similarstring;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select similarstring, count(similarstring) as count from wiscondefopen2gb group by wiscondefopen2gb.similarstring;
use wisconopen2gb; select similarstring, count(similarstring) as count from wiscondefopen2gb /*+ hash */ group by wiscondefopen2gb.similarstring;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select similarsmallstring, count(similarsmallstring) as count from wiscondefopen2gb group by wiscondefopen2gb.similarsmallstring;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select similarsmallstring, count(similarsmallstring) as count from wiscondefopen2gb group by wiscondefopen2gb.similarsmallstring;
use wisconopen2gb; select similarsmallstring, count(similarsmallstring) as count from wiscondefopen2gb /*+ hash */ group by wiscondefopen2gb.similarsmallstring;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select normalsmallstring, count(normalsmallstring) as count from wiscondefopen2gb group by wiscondefopen2gb.normalsmallstring;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select normalsmallstring, count(normalsmallstring) as count from wiscondefopen2gb group by wiscondefopen2gb.normalsmallstring;
use wisconopen2gb; select normalsmallstring, count(normalsmallstring) as count from wiscondefopen2gb /*+ hash */ group by wiscondefopen2gb.normalsmallstring;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select variablelengthstring, count(variablelengthstring) as count from wiscondefopen2gb group by wiscondefopen2gb.variablelengthstring;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select variablelengthstring, count(variablelengthstring) as count from wiscondefopen2gb group by wiscondefopen2gb.variablelengthstring;
use wisconopen2gb; select variablelengthstring, count(variablelengthstring) as count from wiscondefopen2gb /*+ hash */ group by wiscondefopen2gb.variablelengthstring;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select ten, count(ten) as count from wiscondefopen4gb group by wiscondefopen4gb.ten;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select ten, count(ten) as count from wiscondefopen4gb group by wiscondefopen4gb.ten;
use wisconopen4gb; select ten, count(ten) as count from wiscondefopen4gb /*+ hash */ group by wiscondefopen4gb.ten;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen4gb group by wiscondefopen4gb.tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen4gb group by wiscondefopen4gb.tenkgroups;
use wisconopen4gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen4gb /*+ hash */ group by wiscondefopen4gb.tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select milliongroups, count(milliongroups) as count from wiscondefopen4gb group by wiscondefopen4gb.milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select milliongroups, count(milliongroups) as count from wiscondefopen4gb group by wiscondefopen4gb.milliongroups;
use wisconopen4gb; select milliongroups, count(milliongroups) as count from wiscondefopen4gb /*+ hash */ group by wiscondefopen4gb.milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select similarstring, count(similarstring) as count from wiscondefopen4gb group by wiscondefopen4gb.similarstring;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select similarstring, count(similarstring) as count from wiscondefopen4gb group by wiscondefopen4gb.similarstring;
use wisconopen4gb; select similarstring, count(similarstring) as count from wiscondefopen4gb /*+ hash */ group by wiscondefopen4gb.similarstring;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select similarsmallstring, count(similarsmallstring) as count from wiscondefopen4gb group by wiscondefopen4gb.similarsmallstring;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select similarsmallstring, count(similarsmallstring) as count from wiscondefopen4gb group by wiscondefopen4gb.similarsmallstring;
use wisconopen4gb; select similarsmallstring, count(similarsmallstring) as count from wiscondefopen4gb /*+ hash */ group by wiscondefopen4gb.similarsmallstring;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select normalsmallstring, count(normalsmallstring) as count from wiscondefopen4gb group by wiscondefopen4gb.normalsmallstring;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select normalsmallstring, count(normalsmallstring) as count from wiscondefopen4gb group by wiscondefopen4gb.normalsmallstring;
use wisconopen4gb; select normalsmallstring, count(normalsmallstring) as count from wiscondefopen4gb /*+ hash */ group by wiscondefopen4gb.normalsmallstring;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select variablelengthstring, count(variablelengthstring) as count from wiscondefopen4gb group by wiscondefopen4gb.variablelengthstring;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select variablelengthstring, count(variablelengthstring) as count from wiscondefopen4gb group by wiscondefopen4gb.variablelengthstring;
use wisconopen4gb; select variablelengthstring, count(variablelengthstring) as count from wiscondefopen4gb /*+ hash */ group by wiscondefopen4gb.variablelengthstring;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select ten, count(ten) as count from wiscondefopen8gb group by wiscondefopen8gb.ten;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select ten, count(ten) as count from wiscondefopen8gb group by wiscondefopen8gb.ten;
use wisconopen8gb; select ten, count(ten) as count from wiscondefopen8gb /*+ hash */ group by wiscondefopen8gb.ten;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen8gb group by wiscondefopen8gb.tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen8gb group by wiscondefopen8gb.tenkgroups;
use wisconopen8gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen8gb /*+ hash */ group by wiscondefopen8gb.tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select milliongroups, count(milliongroups) as count from wiscondefopen8gb group by wiscondefopen8gb.milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select milliongroups, count(milliongroups) as count from wiscondefopen8gb group by wiscondefopen8gb.milliongroups;
use wisconopen8gb; select milliongroups, count(milliongroups) as count from wiscondefopen8gb /*+ hash */ group by wiscondefopen8gb.milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select similarstring, count(similarstring) as count from wiscondefopen8gb group by wiscondefopen8gb.similarstring;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select similarstring, count(similarstring) as count from wiscondefopen8gb group by wiscondefopen8gb.similarstring;
use wisconopen8gb; select similarstring, count(similarstring) as count from wiscondefopen8gb /*+ hash */ group by wiscondefopen8gb.similarstring;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select similarsmallstring, count(similarsmallstring) as count from wiscondefopen8gb group by wiscondefopen8gb.similarsmallstring;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select similarsmallstring, count(similarsmallstring) as count from wiscondefopen8gb group by wiscondefopen8gb.similarsmallstring;
use wisconopen8gb; select similarsmallstring, count(similarsmallstring) as count from wiscondefopen8gb /*+ hash */ group by wiscondefopen8gb.similarsmallstring;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select normalsmallstring, count(normalsmallstring) as count from wiscondefopen8gb group by wiscondefopen8gb.normalsmallstring;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select normalsmallstring, count(normalsmallstring) as count from wiscondefopen8gb group by wiscondefopen8gb.normalsmallstring;
use wisconopen8gb; select normalsmallstring, count(normalsmallstring) as count from wiscondefopen8gb /*+ hash */ group by wiscondefopen8gb.normalsmallstring;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select variablelengthstring, count(variablelengthstring) as count from wiscondefopen8gb group by wiscondefopen8gb.variablelengthstring;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select variablelengthstring, count(variablelengthstring) as count from wiscondefopen8gb group by wiscondefopen8gb.variablelengthstring;
use wisconopen8gb; select variablelengthstring, count(variablelengthstring) as count from wiscondefopen8gb /*+ hash */ group by wiscondefopen8gb.variablelengthstring;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select ten, count(ten) as count from wiscondefopen16gb group by wiscondefopen16gb.ten;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select ten, count(ten) as count from wiscondefopen16gb group by wiscondefopen16gb.ten;
use wisconopen16gb; select ten, count(ten) as count from wiscondefopen16gb /*+ hash */ group by wiscondefopen16gb.ten;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen16gb group by wiscondefopen16gb.tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen16gb group by wiscondefopen16gb.tenkgroups;
use wisconopen16gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen16gb /*+ hash */ group by wiscondefopen16gb.tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select milliongroups, count(milliongroups) as count from wiscondefopen16gb group by wiscondefopen16gb.milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select milliongroups, count(milliongroups) as count from wiscondefopen16gb group by wiscondefopen16gb.milliongroups;
use wisconopen16gb; select milliongroups, count(milliongroups) as count from wiscondefopen16gb /*+ hash */ group by wiscondefopen16gb.milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select similarstring, count(similarstring) as count from wiscondefopen16gb group by wiscondefopen16gb.similarstring;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select similarstring, count(similarstring) as count from wiscondefopen16gb group by wiscondefopen16gb.similarstring;
use wisconopen16gb; select similarstring, count(similarstring) as count from wiscondefopen16gb /*+ hash */ group by wiscondefopen16gb.similarstring;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select similarsmallstring, count(similarsmallstring) as count from wiscondefopen16gb group by wiscondefopen16gb.similarsmallstring;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select similarsmallstring, count(similarsmallstring) as count from wiscondefopen16gb group by wiscondefopen16gb.similarsmallstring;
use wisconopen16gb; select similarsmallstring, count(similarsmallstring) as count from wiscondefopen16gb /*+ hash */ group by wiscondefopen16gb.similarsmallstring;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select normalsmallstring, count(normalsmallstring) as count from wiscondefopen16gb group by wiscondefopen16gb.normalsmallstring;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select normalsmallstring, count(normalsmallstring) as count from wiscondefopen16gb group by wiscondefopen16gb.normalsmallstring;
use wisconopen16gb; select normalsmallstring, count(normalsmallstring) as count from wiscondefopen16gb /*+ hash */ group by wiscondefopen16gb.normalsmallstring;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select variablelengthstring, count(variablelengthstring) as count from wiscondefopen16gb group by wiscondefopen16gb.variablelengthstring;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select variablelengthstring, count(variablelengthstring) as count from wiscondefopen16gb group by wiscondefopen16gb.variablelengthstring;
use wisconopen16gb; select variablelengthstring, count(variablelengthstring) as count from wiscondefopen16gb /*+ hash */ group by wiscondefopen16gb.variablelengthstring;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select ten, count(ten) as count from wiscondefopen32gb group by wiscondefopen32gb.ten;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select ten, count(ten) as count from wiscondefopen32gb group by wiscondefopen32gb.ten;
use wisconopen32gb; select ten, count(ten) as count from wiscondefopen32gb /*+ hash */ group by wiscondefopen32gb.ten;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen32gb group by wiscondefopen32gb.tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen32gb group by wiscondefopen32gb.tenkgroups;
use wisconopen32gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen32gb /*+ hash */ group by wiscondefopen32gb.tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select milliongroups, count(milliongroups) as count from wiscondefopen32gb group by wiscondefopen32gb.milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select milliongroups, count(milliongroups) as count from wiscondefopen32gb group by wiscondefopen32gb.milliongroups;
use wisconopen32gb; select milliongroups, count(milliongroups) as count from wiscondefopen32gb /*+ hash */ group by wiscondefopen32gb.milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select similarstring, count(similarstring) as count from wiscondefopen32gb group by wiscondefopen32gb.similarstring;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select similarstring, count(similarstring) as count from wiscondefopen32gb group by wiscondefopen32gb.similarstring;
use wisconopen32gb; select similarstring, count(similarstring) as count from wiscondefopen32gb /*+ hash */ group by wiscondefopen32gb.similarstring;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select similarsmallstring, count(similarsmallstring) as count from wiscondefopen32gb group by wiscondefopen32gb.similarsmallstring;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select similarsmallstring, count(similarsmallstring) as count from wiscondefopen32gb group by wiscondefopen32gb.similarsmallstring;
use wisconopen32gb; select similarsmallstring, count(similarsmallstring) as count from wiscondefopen32gb /*+ hash */ group by wiscondefopen32gb.similarsmallstring;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select normalsmallstring, count(normalsmallstring) as count from wiscondefopen32gb group by wiscondefopen32gb.normalsmallstring;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select normalsmallstring, count(normalsmallstring) as count from wiscondefopen32gb group by wiscondefopen32gb.normalsmallstring;
use wisconopen32gb; select normalsmallstring, count(normalsmallstring) as count from wiscondefopen32gb /*+ hash */ group by wiscondefopen32gb.normalsmallstring;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select variablelengthstring, count(variablelengthstring) as count from wiscondefopen32gb group by wiscondefopen32gb.variablelengthstring;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select variablelengthstring, count(variablelengthstring) as count from wiscondefopen32gb group by wiscondefopen32gb.variablelengthstring;
use wisconopen32gb; select variablelengthstring, count(variablelengthstring) as count from wiscondefopen32gb /*+ hash */ group by wiscondefopen32gb.variablelengthstring;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select ten, count(ten) as count from wiscondefopen64gb group by wiscondefopen64gb.ten;
use wisconopen64gb; select ten, count(ten) as count from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.ten;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.tenkgroups;
use wisconopen64gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select milliongroups, count(milliongroups) as count from wiscondefopen64gb group by wiscondefopen64gb.milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select milliongroups, count(milliongroups) as count from wiscondefopen64gb group by wiscondefopen64gb.milliongroups;
use wisconopen64gb; select milliongroups, count(milliongroups) as count from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select similarstring, count(similarstring) as count from wiscondefopen64gb group by wiscondefopen64gb.similarstring;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select similarstring, count(similarstring) as count from wiscondefopen64gb group by wiscondefopen64gb.similarstring;
use wisconopen64gb; select similarstring, count(similarstring) as count from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.similarstring;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select similarsmallstring, count(similarsmallstring) as count from wiscondefopen64gb group by wiscondefopen64gb.similarsmallstring;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select similarsmallstring, count(similarsmallstring) as count from wiscondefopen64gb group by wiscondefopen64gb.similarsmallstring;
use wisconopen64gb; select similarsmallstring, count(similarsmallstring) as count from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.similarsmallstring;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select normalsmallstring, count(normalsmallstring) as count from wiscondefopen64gb group by wiscondefopen64gb.normalsmallstring;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select normalsmallstring, count(normalsmallstring) as count from wiscondefopen64gb group by wiscondefopen64gb.normalsmallstring;
use wisconopen64gb; select normalsmallstring, count(normalsmallstring) as count from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.normalsmallstring;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select variablelengthstring, count(variablelengthstring) as count from wiscondefopen64gb group by wiscondefopen64gb.variablelengthstring;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select variablelengthstring, count(variablelengthstring) as count from wiscondefopen64gb group by wiscondefopen64gb.variablelengthstring;
use wisconopen64gb; select variablelengthstring, count(variablelengthstring) as count from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.variablelengthstring;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select hundred, count(hundred) as count from wiscondefopen2gb group by wiscondefopen2gb.hundred;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select hundred, count(hundred) as count from wiscondefopen2gb group by wiscondefopen2gb.hundred;
use wisconopen2gb; select hundred, count(hundred) as count from wiscondefopen2gb /*+ hash */ group by wiscondefopen2gb.hundred;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select kgroups, count(kgroups) as count from wiscondefopen2gb group by wiscondefopen2gb.kgroups;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select kgroups, count(kgroups) as count from wiscondefopen2gb group by wiscondefopen2gb.kgroups;
use wisconopen2gb; select kgroups, count(kgroups) as count from wiscondefopen2gb /*+ hash */ group by wiscondefopen2gb.kgroups;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen2gb group by wiscondefopen2gb.hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen2gb group by wiscondefopen2gb.hundredkgroups;
use wisconopen2gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen2gb /*+ hash */ group by wiscondefopen2gb.hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select hundred, count(hundred) as count from wiscondefopen4gb group by wiscondefopen4gb.hundred;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select hundred, count(hundred) as count from wiscondefopen4gb group by wiscondefopen4gb.hundred;
use wisconopen4gb; select hundred, count(hundred) as count from wiscondefopen4gb /*+ hash */ group by wiscondefopen4gb.hundred;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select hundred, count(hundred) as count from wiscondefopen16gb group by wiscondefopen16gb.hundred;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select hundred, count(hundred) as count from wiscondefopen16gb group by wiscondefopen16gb.hundred;
use wisconopen16gb; select hundred, count(hundred) as count from wiscondefopen16gb /*+ hash */ group by wiscondefopen16gb.hundred;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select kgroups, count(kgroups) as count from wiscondefopen16gb group by wiscondefopen16gb.kgroups;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select kgroups, count(kgroups) as count from wiscondefopen16gb group by wiscondefopen16gb.kgroups;
use wisconopen16gb; select kgroups, count(kgroups) as count from wiscondefopen16gb /*+ hash */ group by wiscondefopen16gb.kgroups;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen16gb group by wiscondefopen16gb.hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen16gb group by wiscondefopen16gb.hundredkgroups;
use wisconopen16gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen16gb /*+ hash */ group by wiscondefopen16gb.hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select hundred, count(hundred) as count from wiscondefopen32gb group by wiscondefopen32gb.hundred;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select hundred, count(hundred) as count from wiscondefopen32gb group by wiscondefopen32gb.hundred;
use wisconopen32gb; select hundred, count(hundred) as count from wiscondefopen32gb /*+ hash */ group by wiscondefopen32gb.hundred;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select kgroups, count(kgroups) as count from wiscondefopen32gb group by wiscondefopen32gb.kgroups;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select kgroups, count(kgroups) as count from wiscondefopen32gb group by wiscondefopen32gb.kgroups;
use wisconopen32gb; select kgroups, count(kgroups) as count from wiscondefopen32gb /*+ hash */ group by wiscondefopen32gb.kgroups;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen32gb group by wiscondefopen32gb.hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen32gb group by wiscondefopen32gb.hundredkgroups;
use wisconopen32gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen32gb /*+ hash */ group by wiscondefopen32gb.hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select hundred, count(hundred) as count from wiscondefopen64gb group by wiscondefopen64gb.hundred;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select hundred, count(hundred) as count from wiscondefopen64gb group by wiscondefopen64gb.hundred;
use wisconopen64gb; select hundred, count(hundred) as count from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.hundred;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select kgroups, count(kgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.kgroups;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select kgroups, count(kgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.kgroups;
use wisconopen64gb; select kgroups, count(kgroups) as count from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.kgroups;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.hundredkgroups;
use wisconopen64gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select kgroups, count(kgroups) as count from wiscondefopen4gb group by wiscondefopen4gb.kgroups;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select kgroups, count(kgroups) as count from wiscondefopen4gb group by wiscondefopen4gb.kgroups;
use wisconopen4gb; select kgroups, count(kgroups) as count from wiscondefopen4gb /*+ hash */ group by wiscondefopen4gb.kgroups;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen4gb group by wiscondefopen4gb.hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen4gb group by wiscondefopen4gb.hundredkgroups;
use wisconopen4gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen4gb /*+ hash */ group by wiscondefopen4gb.hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select hundred, count(hundred) as count from wiscondefopen8gb group by wiscondefopen8gb.hundred;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select hundred, count(hundred) as count from wiscondefopen8gb group by wiscondefopen8gb.hundred;
use wisconopen8gb; select hundred, count(hundred) as count from wiscondefopen8gb /*+ hash */ group by wiscondefopen8gb.hundred;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select kgroups, count(kgroups) as count from wiscondefopen8gb group by wiscondefopen8gb.kgroups;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select kgroups, count(kgroups) as count from wiscondefopen8gb group by wiscondefopen8gb.kgroups;
use wisconopen8gb; select kgroups, count(kgroups) as count from wiscondefopen8gb /*+ hash */ group by wiscondefopen8gb.kgroups;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen8gb group by wiscondefopen8gb.hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen8gb group by wiscondefopen8gb.hundredkgroups;
use wisconopen8gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen8gb /*+ hash */ group by wiscondefopen8gb.hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select ten, sum(ten) as sum from wiscondefopen2gb group by wiscondefopen2gb.ten;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select ten, sum(ten) as sum from wiscondefopen2gb group by wiscondefopen2gb.ten;
use wisconopen2gb; select ten, sum(ten) as sum from wiscondefopen2gb /*+ hash */ group by wiscondefopen2gb.ten;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select tenkgroups, sum(tenkgroups) as sum from wiscondefopen2gb group by wiscondefopen2gb.tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select tenkgroups, sum(tenkgroups) as sum from wiscondefopen2gb group by wiscondefopen2gb.tenkgroups;
use wisconopen2gb; select tenkgroups, sum(tenkgroups) as sum from wiscondefopen2gb /*+ hash */ group by wiscondefopen2gb.tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select milliongroups, sum(milliongroups) as sum from wiscondefopen2gb group by wiscondefopen2gb.milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select milliongroups, sum(milliongroups) as sum from wiscondefopen2gb group by wiscondefopen2gb.milliongroups;
use wisconopen2gb; select milliongroups, sum(milliongroups) as sum from wiscondefopen2gb /*+ hash */ group by wiscondefopen2gb.milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select ten, sum(ten) as sum from wiscondefopen4gb group by wiscondefopen4gb.ten;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select ten, sum(ten) as sum from wiscondefopen4gb group by wiscondefopen4gb.ten;
use wisconopen4gb; select ten, sum(ten) as sum from wiscondefopen4gb /*+ hash */ group by wiscondefopen4gb.ten;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select tenkgroups, sum(tenkgroups) as sum from wiscondefopen4gb group by wiscondefopen4gb.tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select tenkgroups, sum(tenkgroups) as sum from wiscondefopen4gb group by wiscondefopen4gb.tenkgroups;
use wisconopen4gb; select tenkgroups, sum(tenkgroups) as sum from wiscondefopen4gb /*+ hash */ group by wiscondefopen4gb.tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select milliongroups, sum(milliongroups) as sum from wiscondefopen4gb group by wiscondefopen4gb.milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select milliongroups, sum(milliongroups) as sum from wiscondefopen4gb group by wiscondefopen4gb.milliongroups;
use wisconopen4gb; select milliongroups, sum(milliongroups) as sum from wiscondefopen4gb /*+ hash */ group by wiscondefopen4gb.milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select ten, sum(ten) as sum from wiscondefopen8gb group by wiscondefopen8gb.ten;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select ten, sum(ten) as sum from wiscondefopen8gb group by wiscondefopen8gb.ten;
use wisconopen8gb; select ten, sum(ten) as sum from wiscondefopen8gb /*+ hash */ group by wiscondefopen8gb.ten;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select tenkgroups, sum(tenkgroups) as sum from wiscondefopen8gb group by wiscondefopen8gb.tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select tenkgroups, sum(tenkgroups) as sum from wiscondefopen8gb group by wiscondefopen8gb.tenkgroups;
use wisconopen8gb; select tenkgroups, sum(tenkgroups) as sum from wiscondefopen8gb /*+ hash */ group by wiscondefopen8gb.tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select milliongroups, sum(milliongroups) as sum from wiscondefopen8gb group by wiscondefopen8gb.milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select milliongroups, sum(milliongroups) as sum from wiscondefopen8gb group by wiscondefopen8gb.milliongroups;
use wisconopen8gb; select milliongroups, sum(milliongroups) as sum from wiscondefopen8gb /*+ hash */ group by wiscondefopen8gb.milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select ten, sum(ten) as sum from wiscondefopen16gb group by wiscondefopen16gb.ten;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select ten, sum(ten) as sum from wiscondefopen16gb group by wiscondefopen16gb.ten;
use wisconopen16gb; select ten, sum(ten) as sum from wiscondefopen16gb /*+ hash */ group by wiscondefopen16gb.ten;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select tenkgroups, sum(tenkgroups) as sum from wiscondefopen16gb group by wiscondefopen16gb.tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select tenkgroups, sum(tenkgroups) as sum from wiscondefopen16gb group by wiscondefopen16gb.tenkgroups;
use wisconopen16gb; select tenkgroups, sum(tenkgroups) as sum from wiscondefopen16gb /*+ hash */ group by wiscondefopen16gb.tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select milliongroups, sum(milliongroups) as sum from wiscondefopen16gb group by wiscondefopen16gb.milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select milliongroups, sum(milliongroups) as sum from wiscondefopen16gb group by wiscondefopen16gb.milliongroups;
use wisconopen16gb; select milliongroups, sum(milliongroups) as sum from wiscondefopen16gb /*+ hash */ group by wiscondefopen16gb.milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select ten, sum(ten) as sum from wiscondefopen32gb group by wiscondefopen32gb.ten;
use wisconopen32gb; select ten, sum(ten) as sum from wiscondefopen32gb /*+ hash */ group by wiscondefopen32gb.ten;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select tenkgroups, sum(tenkgroups) as sum from wiscondefopen32gb group by wiscondefopen32gb.tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select tenkgroups, sum(tenkgroups) as sum from wiscondefopen32gb group by wiscondefopen32gb.tenkgroups;
use wisconopen32gb; select tenkgroups, sum(tenkgroups) as sum from wiscondefopen32gb /*+ hash */ group by wiscondefopen32gb.tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select milliongroups, sum(milliongroups) as sum from wiscondefopen32gb group by wiscondefopen32gb.milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select milliongroups, sum(milliongroups) as sum from wiscondefopen32gb group by wiscondefopen32gb.milliongroups;
use wisconopen32gb; select milliongroups, sum(milliongroups) as sum from wiscondefopen32gb /*+ hash */ group by wiscondefopen32gb.milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select ten, sum(ten) as sum from wiscondefopen64gb group by wiscondefopen64gb.ten;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select ten, sum(ten) as sum from wiscondefopen64gb group by wiscondefopen64gb.ten;
use wisconopen64gb; select ten, sum(ten) as sum from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.ten;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select tenkgroups, sum(tenkgroups) as sum from wiscondefopen64gb group by wiscondefopen64gb.tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select tenkgroups, sum(tenkgroups) as sum from wiscondefopen64gb group by wiscondefopen64gb.tenkgroups;
use wisconopen64gb; select tenkgroups, sum(tenkgroups) as sum from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select milliongroups, sum(milliongroups) as sum from wiscondefopen64gb group by wiscondefopen64gb.milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select milliongroups, sum(milliongroups) as sum from wiscondefopen64gb group by wiscondefopen64gb.milliongroups;
use wisconopen64gb; select milliongroups, sum(milliongroups) as sum from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select hundred, sum(hundred) as sum from wiscondefopen2gb group by wiscondefopen2gb.hundred;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select hundred, sum(hundred) as sum from wiscondefopen2gb group by wiscondefopen2gb.hundred;
use wisconopen2gb; select hundred, sum(hundred) as sum from wiscondefopen2gb /*+ hash */ group by wiscondefopen2gb.hundred;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select kgroups, sum(kgroups) as sum from wiscondefopen2gb group by wiscondefopen2gb.kgroups;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select kgroups, sum(kgroups) as sum from wiscondefopen2gb group by wiscondefopen2gb.kgroups;
use wisconopen2gb; select kgroups, sum(kgroups) as sum from wiscondefopen2gb /*+ hash */ group by wiscondefopen2gb.kgroups;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select hundredkgroups, sum(hundredkgroups) as sum from wiscondefopen2gb group by wiscondefopen2gb.hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select hundredkgroups, sum(hundredkgroups) as sum from wiscondefopen2gb group by wiscondefopen2gb.hundredkgroups;
use wisconopen2gb; select hundredkgroups, sum(hundredkgroups) as sum from wiscondefopen2gb /*+ hash */ group by wiscondefopen2gb.hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select hundred, sum(hundred) as sum from wiscondefopen16gb group by wiscondefopen16gb.hundred;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select hundred, sum(hundred) as sum from wiscondefopen16gb group by wiscondefopen16gb.hundred;
use wisconopen16gb; select hundred, sum(hundred) as sum from wiscondefopen16gb /*+ hash */ group by wiscondefopen16gb.hundred;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select kgroups, sum(kgroups) as sum from wiscondefopen16gb group by wiscondefopen16gb.kgroups;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select kgroups, sum(kgroups) as sum from wiscondefopen16gb group by wiscondefopen16gb.kgroups;
use wisconopen16gb; select kgroups, sum(kgroups) as sum from wiscondefopen16gb /*+ hash */ group by wiscondefopen16gb.kgroups;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select hundredkgroups, sum(hundredkgroups) as sum from wiscondefopen16gb group by wiscondefopen16gb.hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select hundredkgroups, sum(hundredkgroups) as sum from wiscondefopen16gb group by wiscondefopen16gb.hundredkgroups;
use wisconopen16gb; select hundredkgroups, sum(hundredkgroups) as sum from wiscondefopen16gb /*+ hash */ group by wiscondefopen16gb.hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select hundred, sum(hundred) as sum from wiscondefopen32gb group by wiscondefopen32gb.hundred;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select hundred, sum(hundred) as sum from wiscondefopen32gb group by wiscondefopen32gb.hundred;
use wisconopen32gb; select hundred, sum(hundred) as sum from wiscondefopen32gb /*+ hash */ group by wiscondefopen32gb.hundred;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select kgroups, sum(kgroups) as sum from wiscondefopen32gb group by wiscondefopen32gb.kgroups;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select kgroups, sum(kgroups) as sum from wiscondefopen32gb group by wiscondefopen32gb.kgroups;
use wisconopen32gb; select kgroups, sum(kgroups) as sum from wiscondefopen32gb /*+ hash */ group by wiscondefopen32gb.kgroups;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select hundredkgroups, sum(hundredkgroups) as sum from wiscondefopen32gb group by wiscondefopen32gb.hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select hundredkgroups, sum(hundredkgroups) as sum from wiscondefopen32gb group by wiscondefopen32gb.hundredkgroups;
use wisconopen32gb; select hundredkgroups, sum(hundredkgroups) as sum from wiscondefopen32gb /*+ hash */ group by wiscondefopen32gb.hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select hundred, sum(hundred) as sum from wiscondefopen64gb group by wiscondefopen64gb.hundred;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select hundred, sum(hundred) as sum from wiscondefopen64gb group by wiscondefopen64gb.hundred;
use wisconopen64gb; select hundred, sum(hundred) as sum from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.hundred;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select kgroups, sum(kgroups) as sum from wiscondefopen64gb group by wiscondefopen64gb.kgroups;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select kgroups, sum(kgroups) as sum from wiscondefopen64gb group by wiscondefopen64gb.kgroups;
use wisconopen64gb; select kgroups, sum(kgroups) as sum from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.kgroups;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select hundredkgroups, sum(hundredkgroups) as sum from wiscondefopen64gb group by wiscondefopen64gb.hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select hundredkgroups, sum(hundredkgroups) as sum from wiscondefopen64gb group by wiscondefopen64gb.hundredkgroups;
use wisconopen64gb; select hundredkgroups, sum(hundredkgroups) as sum from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select hundred, sum(hundred) as sum from wiscondefopen4gb group by wiscondefopen4gb.hundred;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select hundred, sum(hundred) as sum from wiscondefopen4gb group by wiscondefopen4gb.hundred;
use wisconopen4gb; select hundred, sum(hundred) as sum from wiscondefopen4gb /*+ hash */ group by wiscondefopen4gb.hundred;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select kgroups, sum(kgroups) as sum from wiscondefopen4gb group by wiscondefopen4gb.kgroups;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select kgroups, sum(kgroups) as sum from wiscondefopen4gb group by wiscondefopen4gb.kgroups;
use wisconopen4gb; select kgroups, sum(kgroups) as sum from wiscondefopen4gb /*+ hash */ group by wiscondefopen4gb.kgroups;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select hundredkgroups, sum(hundredkgroups) as sum from wiscondefopen4gb group by wiscondefopen4gb.hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select hundredkgroups, sum(hundredkgroups) as sum from wiscondefopen4gb group by wiscondefopen4gb.hundredkgroups;
use wisconopen4gb; select hundredkgroups, sum(hundredkgroups) as sum from wiscondefopen4gb /*+ hash */ group by wiscondefopen4gb.hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select hundred, sum(hundred) as sum from wiscondefopen8gb group by wiscondefopen8gb.hundred;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select hundred, sum(hundred) as sum from wiscondefopen8gb group by wiscondefopen8gb.hundred;
use wisconopen8gb; select hundred, sum(hundred) as sum from wiscondefopen8gb /*+ hash */ group by wiscondefopen8gb.hundred;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select kgroups, sum(kgroups) as sum from wiscondefopen8gb group by wiscondefopen8gb.kgroups;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select kgroups, sum(kgroups) as sum from wiscondefopen8gb group by wiscondefopen8gb.kgroups;
use wisconopen8gb; select kgroups, sum(kgroups) as sum from wiscondefopen8gb /*+ hash */ group by wiscondefopen8gb.kgroups;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select hundredkgroups, sum(hundredkgroups) as sum from wiscondefopen8gb group by wiscondefopen8gb.hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select hundredkgroups, sum(hundredkgroups) as sum from wiscondefopen8gb group by wiscondefopen8gb.hundredkgroups;
use wisconopen8gb; select hundredkgroups, sum(hundredkgroups) as sum from wiscondefopen8gb /*+ hash */ group by wiscondefopen8gb.hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select ten, count(ten) as count from wiscondefopen64gb group by wiscondefopen64gb.ten;
set `compiler.optimize.groupby` 'false';set `compiler.groupmemory` '64mb';use wisconopen64gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.tenkgroups;
set `compiler.optimize.groupby` 'true';set `compiler.groupmemory` '64mb';use wisconopen64gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.tenkgroups;
set `compiler.groupmemory` '64mb';use wisconopen64gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.tenkgroups;
set `compiler.optimize.groupby` 'false';set `compiler.groupmemory` '64mb';use wisconopen64gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.hundredkgroups;
set `compiler.optimize.groupby` 'true';set `compiler.groupmemory` '64mb';use wisconopen64gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.hundredkgroups;
set `compiler.groupmemory` '64mb';use wisconopen64gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.hundredkgroups;
set `compiler.optimize.groupby` 'false';set `compiler.groupmemory` '64mb';use wisconopen64gb; select milliongroups, count(milliongroups) as count from wiscondefopen64gb group by wiscondefopen64gb.milliongroups;
set `compiler.optimize.groupby` 'true';set `compiler.groupmemory` '64mb';use wisconopen64gb; select milliongroups, count(milliongroups) as count from wiscondefopen64gb group by wiscondefopen64gb.milliongroups;
set `compiler.groupmemory` '64mb';use wisconopen64gb; select milliongroups, count(milliongroups) as count from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.milliongroups;
set `compiler.optimize.groupby` 'false';set `compiler.groupmemory` '128mb';use wisconopen64gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.tenkgroups;
set `compiler.optimize.groupby` 'true';set `compiler.groupmemory` '128mb';use wisconopen64gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.tenkgroups;
set `compiler.groupmemory` '128mb';use wisconopen64gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.tenkgroups;
set `compiler.optimize.groupby` 'false';set `compiler.groupmemory` '128mb';use wisconopen64gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.hundredkgroups;
set `compiler.optimize.groupby` 'true';set `compiler.groupmemory` '128mb';use wisconopen64gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.hundredkgroups;
set `compiler.groupmemory` '128mb';use wisconopen64gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.hundredkgroups;
set `compiler.optimize.groupby` 'false';set `compiler.groupmemory` '128mb';use wisconopen64gb; select milliongroups, count(milliongroups) as count from wiscondefopen64gb group by wiscondefopen64gb.milliongroups;
set `compiler.optimize.groupby` 'true';set `compiler.groupmemory` '128mb';use wisconopen64gb; select milliongroups, count(milliongroups) as count from wiscondefopen64gb group by wiscondefopen64gb.milliongroups;
set `compiler.groupmemory` '128mb';use wisconopen64gb; select milliongroups, count(milliongroups) as count from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.milliongroups;
set `compiler.optimize.groupby` 'false';set `compiler.groupmemory` '16mb';use wisconopen64gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.tenkgroups;
set `compiler.optimize.groupby` 'true';set `compiler.groupmemory` '16mb';use wisconopen64gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.tenkgroups;
set `compiler.groupmemory` '16mb';use wisconopen64gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.tenkgroups;
set `compiler.optimize.groupby` 'false';set `compiler.groupmemory` '16mb';use wisconopen64gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.hundredkgroups;
set `compiler.optimize.groupby` 'true';set `compiler.groupmemory` '16mb';use wisconopen64gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.hundredkgroups;
set `compiler.groupmemory` '16mb';use wisconopen64gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.hundredkgroups;
set `compiler.optimize.groupby` 'false';set `compiler.groupmemory` '16mb';use wisconopen64gb; select milliongroups, count(milliongroups) as count from wiscondefopen64gb group by wiscondefopen64gb.milliongroups;
set `compiler.optimize.groupby` 'true';set `compiler.groupmemory` '16mb';use wisconopen64gb; select milliongroups, count(milliongroups) as count from wiscondefopen64gb group by wiscondefopen64gb.milliongroups;
set `compiler.groupmemory` '16mb';use wisconopen64gb; select milliongroups, count(milliongroups) as count from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.milliongroups;
set `compiler.optimize.groupby` 'false';set `compiler.groupmemory` '8mb';use wisconopen64gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.tenkgroups;
set `compiler.optimize.groupby` 'true';set `compiler.groupmemory` '8mb';use wisconopen64gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.tenkgroups;
set `compiler.groupmemory` '8mb';use wisconopen64gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.tenkgroups;
set `compiler.optimize.groupby` 'false';set `compiler.groupmemory` '8mb';use wisconopen64gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.hundredkgroups;
set `compiler.optimize.groupby` 'true';set `compiler.groupmemory` '8mb';use wisconopen64gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.hundredkgroups;
set `compiler.groupmemory` '8mb';use wisconopen64gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.hundredkgroups;
set `compiler.optimize.groupby` 'false';set `compiler.groupmemory` '8mb';use wisconopen64gb; select milliongroups, count(milliongroups) as count from wiscondefopen64gb group by wiscondefopen64gb.milliongroups;
set `compiler.optimize.groupby` 'true';set `compiler.groupmemory` '8mb';use wisconopen64gb; select milliongroups, count(milliongroups) as count from wiscondefopen64gb group by wiscondefopen64gb.milliongroups;
set `compiler.groupmemory` '8mb';use wisconopen64gb; select milliongroups, count(milliongroups) as count from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.milliongroups;
set `compiler.optimize.groupby` 'false';set `compiler.groupmemory` '4mb';use wisconopen64gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.tenkgroups;
set `compiler.optimize.groupby` 'true';set `compiler.groupmemory` '4mb';use wisconopen64gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.tenkgroups;
set `compiler.groupmemory` '4mb';use wisconopen64gb; select tenkgroups, count(tenkgroups) as count from wiscondefopen64gb /*+ hash */ group by wiscondefopen64gb.tenkgroups;
set `compiler.optimize.groupby` 'false';set `compiler.groupmemory` '4mb';use wisconopen64gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.hundredkgroups;
set `compiler.optimize.groupby` 'true';set `compiler.groupmemory` '4mb';use wisconopen64gb; select hundredkgroups, count(hundredkgroups) as count from wiscondefopen64gb group by wiscondefopen64gb.hundredkgroups;
set `compiler.optimize.groupby` 'false';set `compiler.groupmemory` '4mb';use wisconopen64gb; select milliongroups, count(milliongroups) as count from wiscondefopen64gb group by wiscondefopen64gb.milliongroups;
set `compiler.optimize.groupby` 'true';set `compiler.groupmemory` '4mb';use wisconopen64gb; select milliongroups, count(milliongroups) as count from wiscondefopen64gb group by wiscondefopen64gb.milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select tenkgroups, similarstring, sum(tenkgroups) as count from wiscondefopen2gb group by similarstring,tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select tenkgroups, similarstring, sum(tenkgroups) as count from wiscondefopen2gb group by similarstring,tenkgroups;
use wisconopen2gb; select tenkgroups, similarstring, sum(tenkgroups) as count from wiscondefopen2gb /*+ hash */ group by similarstring,tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select hundredkgroups, similarstring, sum(hundredkgroups) as count from wiscondefopen2gb group by similarstring,hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select hundredkgroups, similarstring, sum(hundredkgroups) as count from wiscondefopen2gb group by similarstring,hundredkgroups;
use wisconopen2gb; select hundredkgroups, similarstring, sum(hundredkgroups) as count from wiscondefopen2gb /*+ hash */ group by similarstring,hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select milliongroups, similarstring, sum(milliongroups) as count from wiscondefopen2gb group by similarstring,milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select milliongroups, similarstring, sum(milliongroups) as count from wiscondefopen2gb group by similarstring,milliongroups;
use wisconopen2gb; select milliongroups, similarstring, sum(milliongroups) as count from wiscondefopen2gb /*+ hash */ group by similarstring,milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select tenkgroups, similarstring, sum(tenkgroups) as count from wiscondefopen4gb group by similarstring,tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select tenkgroups, similarstring, sum(tenkgroups) as count from wiscondefopen4gb group by similarstring,tenkgroups;
use wisconopen4gb; select tenkgroups, similarstring, sum(tenkgroups) as count from wiscondefopen4gb /*+ hash */ group by similarstring,tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select hundredkgroups, similarstring, sum(hundredkgroups) as count from wiscondefopen4gb group by similarstring,hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select hundredkgroups, similarstring, sum(hundredkgroups) as count from wiscondefopen4gb group by similarstring,hundredkgroups;
use wisconopen4gb; select hundredkgroups, similarstring, sum(hundredkgroups) as count from wiscondefopen4gb /*+ hash */ group by similarstring,hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select milliongroups, similarstring, sum(milliongroups) as count from wiscondefopen4gb group by similarstring,milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select milliongroups, similarstring, sum(milliongroups) as count from wiscondefopen4gb group by similarstring,milliongroups;
use wisconopen4gb; select milliongroups, similarstring, sum(milliongroups) as count from wiscondefopen4gb /*+ hash */ group by similarstring,milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select tenkgroups, similarstring, sum(tenkgroups) as count from wiscondefopen8gb group by similarstring,tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select tenkgroups, similarstring, sum(tenkgroups) as count from wiscondefopen8gb group by similarstring,tenkgroups;
use wisconopen8gb; select tenkgroups, similarstring, sum(tenkgroups) as count from wiscondefopen8gb /*+ hash */ group by similarstring,tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select hundredkgroups, similarstring, sum(hundredkgroups) as count from wiscondefopen8gb group by similarstring,hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select hundredkgroups, similarstring, sum(hundredkgroups) as count from wiscondefopen8gb group by similarstring,hundredkgroups;
use wisconopen8gb; select hundredkgroups, similarstring, sum(hundredkgroups) as count from wiscondefopen8gb /*+ hash */ group by similarstring,hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select milliongroups, similarstring, sum(milliongroups) as count from wiscondefopen8gb group by similarstring,milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select milliongroups, similarstring, sum(milliongroups) as count from wiscondefopen8gb group by similarstring,milliongroups;
use wisconopen8gb; select milliongroups, similarstring, sum(milliongroups) as count from wiscondefopen8gb /*+ hash */ group by similarstring,milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select tenkgroups, similarstring, sum(tenkgroups) as count from wiscondefopen16gb group by similarstring,tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select tenkgroups, similarstring, sum(tenkgroups) as count from wiscondefopen16gb group by similarstring,tenkgroups;
use wisconopen16gb; select tenkgroups, similarstring, sum(tenkgroups) as count from wiscondefopen16gb /*+ hash */ group by similarstring,tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select hundredkgroups, similarstring, sum(hundredkgroups) as count from wiscondefopen16gb group by similarstring,hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select hundredkgroups, similarstring, sum(hundredkgroups) as count from wiscondefopen16gb group by similarstring,hundredkgroups;
use wisconopen16gb; select hundredkgroups, similarstring, sum(hundredkgroups) as count from wiscondefopen16gb /*+ hash */ group by similarstring,hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select milliongroups, similarstring, sum(milliongroups) as count from wiscondefopen16gb group by similarstring,milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select milliongroups, similarstring, sum(milliongroups) as count from wiscondefopen16gb group by similarstring,milliongroups;
use wisconopen16gb; select milliongroups, similarstring, sum(milliongroups) as count from wiscondefopen16gb /*+ hash */ group by similarstring,milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select tenkgroups, similarstring, sum(tenkgroups) as count from wiscondefopen32gb group by similarstring,tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select tenkgroups, similarstring, sum(tenkgroups) as count from wiscondefopen32gb group by similarstring,tenkgroups;
use wisconopen32gb; select tenkgroups, similarstring, sum(tenkgroups) as count from wiscondefopen32gb /*+ hash */ group by similarstring,tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select hundredkgroups, similarstring, sum(hundredkgroups) as count from wiscondefopen32gb group by similarstring,hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select hundredkgroups, similarstring, sum(hundredkgroups) as count from wiscondefopen32gb group by similarstring,hundredkgroups;
use wisconopen32gb; select hundredkgroups, similarstring, sum(hundredkgroups) as count from wiscondefopen32gb /*+ hash */ group by similarstring,hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select milliongroups, similarstring, sum(milliongroups) as count from wiscondefopen32gb group by similarstring,milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select milliongroups, similarstring, sum(milliongroups) as count from wiscondefopen32gb group by similarstring,milliongroups;
use wisconopen32gb; select milliongroups, similarstring, sum(milliongroups) as count from wiscondefopen32gb /*+ hash */ group by similarstring,milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select tenkgroups, similarstring, sum(tenkgroups) as count from wiscondefopen64gb group by similarstring,tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select tenkgroups, similarstring, sum(tenkgroups) as count from wiscondefopen64gb group by similarstring,tenkgroups;
use wisconopen64gb; select tenkgroups, similarstring, sum(tenkgroups) as count from wiscondefopen64gb /*+ hash */ group by similarstring,tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select hundredkgroups, similarstring, sum(hundredkgroups) as count from wiscondefopen64gb group by similarstring,hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select hundredkgroups, similarstring, sum(hundredkgroups) as count from wiscondefopen64gb group by similarstring,hundredkgroups;
use wisconopen64gb; select hundredkgroups, similarstring, sum(hundredkgroups) as count from wiscondefopen64gb /*+ hash */ group by similarstring,hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select milliongroups, similarstring, sum(milliongroups) as count from wiscondefopen64gb group by similarstring,milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select milliongroups, similarstring, sum(milliongroups) as count from wiscondefopen64gb group by similarstring,milliongroups;
use wisconopen64gb; select milliongroups, similarstring, sum(milliongroups) as count from wiscondefopen64gb /*+ hash */ group by similarstring,milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select tenkgroups, similarsmallstring, sum(tenkgroups) as count from wiscondefopen2gb group by similarsmallstring,tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select tenkgroups, similarsmallstring, sum(tenkgroups) as count from wiscondefopen2gb group by similarsmallstring,tenkgroups;
use wisconopen2gb; select tenkgroups, similarsmallstring, sum(tenkgroups) as count from wiscondefopen2gb /*+ hash */ group by similarsmallstring,tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select hundredkgroups, similarsmallstring, sum(hundredkgroups) as count from wiscondefopen2gb group by similarsmallstring,hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select hundredkgroups, similarsmallstring, sum(hundredkgroups) as count from wiscondefopen2gb group by similarsmallstring,hundredkgroups;
use wisconopen2gb; select hundredkgroups, similarsmallstring, sum(hundredkgroups) as count from wiscondefopen2gb /*+ hash */ group by similarsmallstring,hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select milliongroups, similarsmallstring, sum(milliongroups) as count from wiscondefopen2gb group by similarsmallstring,milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select milliongroups, similarsmallstring, sum(milliongroups) as count from wiscondefopen2gb group by similarsmallstring,milliongroups;
use wisconopen2gb; select milliongroups, similarsmallstring, sum(milliongroups) as count from wiscondefopen2gb /*+ hash */ group by similarsmallstring,milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select tenkgroups, similarsmallstring, sum(tenkgroups) as count from wiscondefopen4gb group by similarsmallstring,tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select tenkgroups, similarsmallstring, sum(tenkgroups) as count from wiscondefopen4gb group by similarsmallstring,tenkgroups;
use wisconopen4gb; select tenkgroups, similarsmallstring, sum(tenkgroups) as count from wiscondefopen4gb /*+ hash */ group by similarsmallstring,tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select hundredkgroups, similarsmallstring, sum(hundredkgroups) as count from wiscondefopen4gb group by similarsmallstring,hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select hundredkgroups, similarsmallstring, sum(hundredkgroups) as count from wiscondefopen4gb group by similarsmallstring,hundredkgroups;
use wisconopen4gb; select hundredkgroups, similarsmallstring, sum(hundredkgroups) as count from wiscondefopen4gb /*+ hash */ group by similarsmallstring,hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select milliongroups, similarsmallstring, sum(milliongroups) as count from wiscondefopen4gb group by similarsmallstring,milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select milliongroups, similarsmallstring, sum(milliongroups) as count from wiscondefopen4gb group by similarsmallstring,milliongroups;
use wisconopen4gb; select milliongroups, similarsmallstring, sum(milliongroups) as count from wiscondefopen4gb /*+ hash */ group by similarsmallstring,milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select tenkgroups, similarsmallstring, sum(tenkgroups) as count from wiscondefopen8gb group by similarsmallstring,tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select tenkgroups, similarsmallstring, sum(tenkgroups) as count from wiscondefopen8gb group by similarsmallstring,tenkgroups;
use wisconopen8gb; select tenkgroups, similarsmallstring, sum(tenkgroups) as count from wiscondefopen8gb /*+ hash */ group by similarsmallstring,tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select hundredkgroups, similarsmallstring, sum(hundredkgroups) as count from wiscondefopen8gb group by similarsmallstring,hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select hundredkgroups, similarsmallstring, sum(hundredkgroups) as count from wiscondefopen8gb group by similarsmallstring,hundredkgroups;
use wisconopen8gb; select hundredkgroups, similarsmallstring, sum(hundredkgroups) as count from wiscondefopen8gb /*+ hash */ group by similarsmallstring,hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select milliongroups, similarsmallstring, sum(milliongroups) as count from wiscondefopen8gb group by similarsmallstring,milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select milliongroups, similarsmallstring, sum(milliongroups) as count from wiscondefopen8gb group by similarsmallstring,milliongroups;
use wisconopen8gb; select milliongroups, similarsmallstring, sum(milliongroups) as count from wiscondefopen8gb /*+ hash */ group by similarsmallstring,milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select tenkgroups, similarsmallstring, sum(tenkgroups) as count from wiscondefopen16gb group by similarsmallstring,tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select tenkgroups, similarsmallstring, sum(tenkgroups) as count from wiscondefopen16gb group by similarsmallstring,tenkgroups;
use wisconopen16gb; select tenkgroups, similarsmallstring, sum(tenkgroups) as count from wiscondefopen16gb /*+ hash */ group by similarsmallstring,tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select hundredkgroups, similarsmallstring, sum(hundredkgroups) as count from wiscondefopen16gb group by similarsmallstring,hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select hundredkgroups, similarsmallstring, sum(hundredkgroups) as count from wiscondefopen16gb group by similarsmallstring,hundredkgroups;
use wisconopen16gb; select hundredkgroups, similarsmallstring, sum(hundredkgroups) as count from wiscondefopen16gb /*+ hash */ group by similarsmallstring,hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select milliongroups, similarsmallstring, sum(milliongroups) as count from wiscondefopen16gb group by similarsmallstring,milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select milliongroups, similarsmallstring, sum(milliongroups) as count from wiscondefopen16gb group by similarsmallstring,milliongroups;
use wisconopen16gb; select milliongroups, similarsmallstring, sum(milliongroups) as count from wiscondefopen16gb /*+ hash */ group by similarsmallstring,milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select tenkgroups, similarsmallstring, sum(tenkgroups) as count from wiscondefopen32gb group by similarsmallstring,tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select tenkgroups, similarsmallstring, sum(tenkgroups) as count from wiscondefopen32gb group by similarsmallstring,tenkgroups;
use wisconopen32gb; select tenkgroups, similarsmallstring, sum(tenkgroups) as count from wiscondefopen32gb /*+ hash */ group by similarsmallstring,tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select hundredkgroups, similarsmallstring, sum(hundredkgroups) as count from wiscondefopen32gb group by similarsmallstring,hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select hundredkgroups, similarsmallstring, sum(hundredkgroups) as count from wiscondefopen32gb group by similarsmallstring,hundredkgroups;
use wisconopen32gb; select hundredkgroups, similarsmallstring, sum(hundredkgroups) as count from wiscondefopen32gb /*+ hash */ group by similarsmallstring,hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select milliongroups, similarsmallstring, sum(milliongroups) as count from wiscondefopen32gb group by similarsmallstring,milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select milliongroups, similarsmallstring, sum(milliongroups) as count from wiscondefopen32gb group by similarsmallstring,milliongroups;
use wisconopen32gb; select milliongroups, similarsmallstring, sum(milliongroups) as count from wiscondefopen32gb /*+ hash */ group by similarsmallstring,milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select tenkgroups, similarsmallstring, sum(tenkgroups) as count from wiscondefopen64gb group by similarsmallstring,tenkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select tenkgroups, similarsmallstring, sum(tenkgroups) as count from wiscondefopen64gb group by similarsmallstring,tenkgroups;
use wisconopen64gb; select tenkgroups, similarsmallstring, sum(tenkgroups) as count from wiscondefopen64gb /*+ hash */ group by similarsmallstring,tenkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select hundredkgroups, similarsmallstring, sum(hundredkgroups) as count from wiscondefopen64gb group by similarsmallstring,hundredkgroups;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select hundredkgroups, similarsmallstring, sum(hundredkgroups) as count from wiscondefopen64gb group by similarsmallstring,hundredkgroups;
use wisconopen64gb; select hundredkgroups, similarsmallstring, sum(hundredkgroups) as count from wiscondefopen64gb /*+ hash */ group by similarsmallstring,hundredkgroups;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select milliongroups, similarsmallstring, sum(milliongroups) as count from wiscondefopen64gb group by similarsmallstring,milliongroups;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select milliongroups, similarsmallstring, sum(milliongroups) as count from wiscondefopen64gb group by similarsmallstring,milliongroups;
use wisconopen64gb; select milliongroups, similarsmallstring, sum(milliongroups) as count from wiscondefopen64gb /*+ hash */ group by similarsmallstring,milliongroups;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select ten, sum(ten) as sum from wiscondefopen32gb group by wiscondefopen32gb.ten;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select ten, max(ten) as max from wiscondefopen2gb group by ten;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select ten, max(ten) as max from wiscondefopen2gb group by ten;
use wisconopen2gb; select ten, max(ten) as max from wiscondefopen2gb /*+ hash */ group by ten;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select ten, max(ten) as max from wiscondefopen4gb group by ten;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select ten, max(ten) as max from wiscondefopen4gb group by ten;
use wisconopen4gb; select ten, max(ten) as max from wiscondefopen4gb /*+ hash */ group by ten;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select ten, max(ten) as max from wiscondefopen8gb group by ten;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select ten, max(ten) as max from wiscondefopen8gb group by ten;
use wisconopen8gb; select ten, max(ten) as max from wiscondefopen8gb /*+ hash */ group by ten;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select ten, max(ten) as max from wiscondefopen16gb group by ten;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select ten, max(ten) as max from wiscondefopen16gb group by ten;
use wisconopen16gb; select ten, max(ten) as max from wiscondefopen16gb /*+ hash */ group by ten;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select ten, max(ten) as max from wiscondefopen32gb group by ten;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select ten, max(ten) as max from wiscondefopen32gb group by ten;
use wisconopen32gb; select ten, max(ten) as max from wiscondefopen32gb /*+ hash */ group by ten;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select ten, max(ten) as max from wiscondefopen64gb group by ten;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select ten, max(ten) as max from wiscondefopen64gb group by ten;
use wisconopen64gb; select ten, max(ten) as max from wiscondefopen64gb /*+ hash */ group by ten;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select ten, min(ten) as min from wiscondefopen2gb group by ten;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select ten, min(ten) as min from wiscondefopen2gb group by ten;
use wisconopen2gb; select ten, min(ten) as min from wiscondefopen2gb /*+ hash */ group by ten;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select ten, min(ten) as min from wiscondefopen4gb group by ten;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select ten, min(ten) as min from wiscondefopen4gb group by ten;
use wisconopen4gb; select ten, min(ten) as min from wiscondefopen4gb /*+ hash */ group by ten;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select ten, min(ten) as min from wiscondefopen8gb group by ten;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select ten, min(ten) as min from wiscondefopen8gb group by ten;
use wisconopen8gb; select ten, min(ten) as min from wiscondefopen8gb /*+ hash */ group by ten;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select ten, min(ten) as min from wiscondefopen16gb group by ten;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select ten, min(ten) as min from wiscondefopen16gb group by ten;
use wisconopen16gb; select ten, min(ten) as min from wiscondefopen16gb /*+ hash */ group by ten;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select ten, min(ten) as min from wiscondefopen32gb group by ten;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select ten, min(ten) as min from wiscondefopen32gb group by ten;
use wisconopen32gb; select ten, min(ten) as min from wiscondefopen32gb /*+ hash */ group by ten;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select ten, min(ten) as min from wiscondefopen64gb group by ten;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select ten, min(ten) as min from wiscondefopen64gb group by ten;
use wisconopen64gb; select ten, min(ten) as min from wiscondefopen64gb /*+ hash */ group by ten;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select stringu2, count(stringu2) as count from wiscondefopen2gb group by stringu2;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select stringu2, count(stringu2) as count from wiscondefopen2gb group by stringu2;
use wisconopen2gb; select stringu2, count(stringu2) as count from wiscondefopen2gb /*+ hash */ group by stringu2;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select stringu2, count(stringu2) as count from wiscondefopen4gb group by stringu2;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select stringu2, count(stringu2) as count from wiscondefopen4gb group by stringu2;
use wisconopen4gb; select stringu2, count(stringu2) as count from wiscondefopen4gb /*+ hash */ group by stringu2;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select stringu2, count(stringu2) as count from wiscondefopen8gb group by stringu2;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select stringu2, count(stringu2) as count from wiscondefopen8gb group by stringu2;
use wisconopen8gb; select stringu2, count(stringu2) as count from wiscondefopen8gb /*+ hash */ group by stringu2;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select stringu2, count(stringu2) as count from wiscondefopen16gb group by stringu2;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select stringu2, count(stringu2) as count from wiscondefopen16gb group by stringu2;
use wisconopen16gb; select stringu2, count(stringu2) as count from wiscondefopen16gb /*+ hash */ group by stringu2;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select stringu2, count(stringu2) as count from wiscondefopen32gb group by stringu2;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select stringu2, count(stringu2) as count from wiscondefopen32gb group by stringu2;
use wisconopen32gb; select stringu2, count(stringu2) as count from wiscondefopen32gb /*+ hash */ group by stringu2;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select stringu2, count(stringu2) as count from wiscondefopen64gb group by stringu2;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select stringu2, count(stringu2) as count from wiscondefopen64gb group by stringu2;
use wisconopen64gb; select stringu2, count(stringu2) as count from wiscondefopen64gb /*+ hash */ group by stringu2;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select unique3, count(unique3) as count from wiscondefopen2gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select unique3, count(unique3) as count from wiscondefopen2gb group by unique3;
use wisconopen2gb; select unique3, count(unique3) as count from wiscondefopen2gb /*+ hash */ group by unique3;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select unique3, count(unique3) as count from wiscondefopen4gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select unique3, count(unique3) as count from wiscondefopen4gb group by unique3;
use wisconopen4gb; select unique3, count(unique3) as count from wiscondefopen4gb /*+ hash */ group by unique3;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select unique3, count(unique3) as count from wiscondefopen8gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select unique3, count(unique3) as count from wiscondefopen8gb group by unique3;
use wisconopen8gb; select unique3, count(unique3) as count from wiscondefopen8gb /*+ hash */ group by unique3;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select unique3, count(unique3) as count from wiscondefopen16gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select unique3, count(unique3) as count from wiscondefopen16gb group by unique3;
use wisconopen16gb; select unique3, count(unique3) as count from wiscondefopen16gb /*+ hash */ group by unique3;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select unique3, count(unique3) as count from wiscondefopen32gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select unique3, count(unique3) as count from wiscondefopen32gb group by unique3;
use wisconopen32gb; select unique3, count(unique3) as count from wiscondefopen32gb /*+ hash */ group by unique3;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select unique3, count(unique3) as count from wiscondefopen64gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select unique3, count(unique3) as count from wiscondefopen64gb group by unique3;
use wisconopen64gb; select unique3, count(unique3) as count from wiscondefopen64gb /*+ hash */ group by unique3;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select unique3, sum(unique3) as sum from wiscondefopen2gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select unique3, sum(unique3) as sum from wiscondefopen2gb group by unique3;
use wisconopen2gb; select unique3, sum(unique3) as sum from wiscondefopen2gb /*+ hash */ group by unique3;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select unique3, sum(unique3) as sum from wiscondefopen4gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select unique3, sum(unique3) as sum from wiscondefopen4gb group by unique3;
use wisconopen4gb; select unique3, sum(unique3) as sum from wiscondefopen4gb /*+ hash */ group by unique3;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select unique3, sum(unique3) as sum from wiscondefopen8gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select unique3, sum(unique3) as sum from wiscondefopen8gb group by unique3;
use wisconopen8gb; select unique3, sum(unique3) as sum from wiscondefopen8gb /*+ hash */ group by unique3;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select unique3, sum(unique3) as sum from wiscondefopen16gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select unique3, sum(unique3) as sum from wiscondefopen16gb group by unique3;
use wisconopen16gb; select unique3, sum(unique3) as sum from wiscondefopen16gb /*+ hash */ group by unique3;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select unique3, sum(unique3) as sum from wiscondefopen32gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select unique3, sum(unique3) as sum from wiscondefopen32gb group by unique3;
use wisconopen32gb; select unique3, sum(unique3) as sum from wiscondefopen32gb /*+ hash */ group by unique3;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select unique3, sum(unique3) as sum from wiscondefopen64gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select unique3, sum(unique3) as sum from wiscondefopen64gb group by unique3;
use wisconopen64gb; select unique3, sum(unique3) as sum from wiscondefopen64gb /*+ hash */ group by unique3;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select unique3, max(unique3) as max from wiscondefopen2gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select unique3, max(unique3) as max from wiscondefopen2gb group by unique3;
use wisconopen2gb; select unique3, max(unique3) as max from wiscondefopen2gb /*+ hash */ group by unique3;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select unique3, max(unique3) as max from wiscondefopen4gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select unique3, max(unique3) as max from wiscondefopen4gb group by unique3;
use wisconopen4gb; select unique3, max(unique3) as max from wiscondefopen4gb /*+ hash */ group by unique3;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select unique3, max(unique3) as max from wiscondefopen8gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select unique3, max(unique3) as max from wiscondefopen8gb group by unique3;
use wisconopen8gb; select unique3, max(unique3) as max from wiscondefopen8gb /*+ hash */ group by unique3;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select unique3, max(unique3) as max from wiscondefopen16gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select unique3, max(unique3) as max from wiscondefopen16gb group by unique3;
use wisconopen16gb; select unique3, max(unique3) as max from wiscondefopen16gb /*+ hash */ group by unique3;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select unique3, max(unique3) as max from wiscondefopen32gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select unique3, max(unique3) as max from wiscondefopen32gb group by unique3;
use wisconopen32gb; select unique3, max(unique3) as max from wiscondefopen32gb /*+ hash */ group by unique3;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select unique3, max(unique3) as max from wiscondefopen64gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select unique3, max(unique3) as max from wiscondefopen64gb group by unique3;
use wisconopen64gb; select unique3, max(unique3) as max from wiscondefopen64gb /*+ hash */ group by unique3;
set `compiler.optimize.groupby` 'false';use wisconopen2gb; select unique3, min(unique3) as min from wiscondefopen2gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen2gb; select unique3, min(unique3) as min from wiscondefopen2gb group by unique3;
use wisconopen2gb; select unique3, min(unique3) as min from wiscondefopen2gb /*+ hash */ group by unique3;
set `compiler.optimize.groupby` 'false';use wisconopen4gb; select unique3, min(unique3) as min from wiscondefopen4gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen4gb; select unique3, min(unique3) as min from wiscondefopen4gb group by unique3;
use wisconopen4gb; select unique3, min(unique3) as min from wiscondefopen4gb /*+ hash */ group by unique3;
set `compiler.optimize.groupby` 'false';use wisconopen8gb; select unique3, min(unique3) as min from wiscondefopen8gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen8gb; select unique3, min(unique3) as min from wiscondefopen8gb group by unique3;
use wisconopen8gb; select unique3, min(unique3) as min from wiscondefopen8gb /*+ hash */ group by unique3;
set `compiler.optimize.groupby` 'false';use wisconopen16gb; select unique3, min(unique3) as min from wiscondefopen16gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen16gb; select unique3, min(unique3) as min from wiscondefopen16gb group by unique3;
use wisconopen16gb; select unique3, min(unique3) as min from wiscondefopen16gb /*+ hash */ group by unique3;
set `compiler.optimize.groupby` 'false';use wisconopen32gb; select unique3, min(unique3) as min from wiscondefopen32gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen32gb; select unique3, min(unique3) as min from wiscondefopen32gb group by unique3;
use wisconopen32gb; select unique3, min(unique3) as min from wiscondefopen32gb /*+ hash */ group by unique3;
set `compiler.optimize.groupby` 'false';use wisconopen64gb; select unique3, min(unique3) as min from wiscondefopen64gb group by unique3;
set `compiler.optimize.groupby` 'true';use wisconopen64gb; select unique3, min(unique3) as min from wiscondefopen64gb group by unique3;
use wisconopen64gb; select unique3, min(unique3) as min from wiscondefopen64gb /*+ hash */ group by unique3;
