import io
import os
from datetime import datetime as dt, datetime
import shutil
import pandas as pd
import matplotlib.pyplot as plt

# File to plot the data generated by the Process.py script

color = {
    "ZERO_Short": "red",
    "ZERO_Long": "hotpink",
    "SMALL": "royalblue",
    "MEDIUM": "darkorange",
    "LARGE": "cyan",
}


def plotter(filename):
    df = pd.read_csv(filename)
    fig, ax = plt.subplots(figsize=(6, 3), linewidth=1)
    labels = []
    allTimes = []
    for i, task in enumerate(df.iterrows()):
        # print(i, task[0], task[1])
        labels.append(task[0])
        data3 = [task[1][["MemoryQStartTime", "MemoryQDuration"]]]
        ax.broken_barh(
            data3,
            (task[1]["UserID"], 1),
            alpha=0.6,
            linewidth=1,
            facecolors=color[task[1]["QueryClass"]],
            hatch="o",
            linestyle="-.",
            edgecolor="black",
        )
        data2 = [task[1][["ExecutionStart", "ExecutionDuration"]]]
        ax.broken_barh(
            data2,
            (task[1]["UserID"], 1),
            alpha=1,
            linewidth=1,
            facecolors="green",
            edgecolor="green",
        )

        data = [task[1][["StartQueueTime", "Queue_Duration"]]]
        ax.broken_barh(
            data,
            (task[1]["UserID"], 1),
            alpha=0.8,
            linewidth=1,
            facecolors=color[task[1]["QueryClass"]],
            hatch="\\",
            edgecolor="black",
            linestyle="dashed",
        )
    ax.set_xlabel("Duration", size=20, weight="bold")
    ax.set_ylabel("UserID", size=20, weight="bold")
    # plt.yticks(size=20  , weight="bold"  )
    ax.tick_params(axis="x", which="major", pad=5)
    ax.set_ylim(-0.01, 40)
    ax.set_axisbelow(True)
    # ax.set_xlim(0,50)
    plt.style.use("ggplot")
    ax.set(facecolor="white")
    fig.set_size_inches(20, 10.5, forward=True)
    # plt.title(filename.split('.txt')[0], size=20  , weight="bold" )
    plt.xticks(rotation=90, fontsize=20)
    plt.yticks(fontsize=20)
    # ax.legend("ZERO_SHORT","ZERO_LONG","SMALL","MEDIUM","LARGE")
    # ax.get_xaxis().set_visible(False)
    # fig.axes.get_yaxis().set_visible(False)
    plt.savefig(
        "./Plots/" + filename.split("/")[-1].split(".")[0] + ".jpg", bbox_inches="tight"
    )
    # plt.show()
    plt.close()


if __name__ == "__main__":
    plotter("./Results/FIFO_CP_48.csv")
    plotter("./Results/FIFOOrdered_CP_48.csv")
    plotter("./Results/Colorado_V1_CP_48.csv")
    plotter("./Results/Colorado_V2_CP_48.csv")
    plotter("./Results/Wiscon_V1_CP_48.csv")
    plotter("./Results/Wiscon_V2_CP_48.csv")
    plotter("./Results/Wiscon_V3_CP_48.csv")
    plotter("./Results/Colorado_V1_CP_48.csv")
    plotter("./Results/Colorado_V2_CP_48.csv")
